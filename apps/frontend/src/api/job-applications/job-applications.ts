/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateJobApplicationRequest,
  ErrorModel,
  HTTPValidationError,
  JobApplicationDTO
} from '.././models';





/**
 * @summary Apply Job
 */
export const applyJobJobApplicationsPost = (
    createJobApplicationRequest: CreateJobApplicationRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<JobApplicationDTO>> => {
    
    
    return axios.default.post(
      `/job-applications/`,
      createJobApplicationRequest,options
    );
  }



export const getApplyJobJobApplicationsPostMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof applyJobJobApplicationsPost>>, TError,{data: CreateJobApplicationRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof applyJobJobApplicationsPost>>, TError,{data: CreateJobApplicationRequest}, TContext> => {

const mutationKey = ['applyJobJobApplicationsPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof applyJobJobApplicationsPost>>, {data: CreateJobApplicationRequest}> = (props) => {
          const {data} = props ?? {};

          return  applyJobJobApplicationsPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApplyJobJobApplicationsPostMutationResult = NonNullable<Awaited<ReturnType<typeof applyJobJobApplicationsPost>>>
    export type ApplyJobJobApplicationsPostMutationBody = CreateJobApplicationRequest
    export type ApplyJobJobApplicationsPostMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Apply Job
 */
export const useApplyJobJobApplicationsPost = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof applyJobJobApplicationsPost>>, TError,{data: CreateJobApplicationRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof applyJobJobApplicationsPost>>,
        TError,
        {data: CreateJobApplicationRequest},
        TContext
      > => {

      const mutationOptions = getApplyJobJobApplicationsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    