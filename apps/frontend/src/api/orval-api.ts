/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { customAxios } from './custom-axios';
export interface AddOrUpdateSocialRequest {
  name: string;
  /**
   * @minLength 1
   * @maxLength 2083
   */
  link: string;
}

export type BodyLoginAuthTokenPostGrantType = string | null;

export type BodyLoginAuthTokenPostClientId = string | null;

export type BodyLoginAuthTokenPostClientSecret = string | null;

export interface BodyLoginAuthTokenPost {
  grant_type?: BodyLoginAuthTokenPostGrantType;
  username: string;
  password: string;
  scope?: string;
  client_id?: BodyLoginAuthTokenPostClientId;
  client_secret?: BodyLoginAuthTokenPostClientSecret;
}

export interface CandidateDTO {
  id: number;
  first_name: string;
  last_name: string;
  full_name: string;
  phone: string;
  email: string;
}

export interface CandidateSocialLinkDTO {
  id: number;
  name: string;
  link: string;
}

export interface CoverLetterDTO {
  id: number;
  name: string;
  key: string;
}

export interface CreateCandidateRequest {
  first_name: string;
  last_name: string;
  phone: string;
  email: string;
  password: string;
}

export type CreateJobApplicationRequestCoverLetterId = number | null;

export interface CreateJobApplicationRequest {
  job_listing_id: number;
  resume_id: number;
  cover_letter_id?: CreateJobApplicationRequestCoverLetterId;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type JobApplicationDTOUsedResume = ResumeDTO | null;

export type JobApplicationDTOUsedCoverLetter = CoverLetterDTO | null;

export type JobApplicationDTONotes = string | null;

export interface JobApplicationDTO {
  id: number;
  job_listing: JobListingDTO;
  used_resume: JobApplicationDTOUsedResume;
  used_cover_letter: JobApplicationDTOUsedCoverLetter;
  notes: JobApplicationDTONotes;
}

export type JobListingDTOSource = string | null;

export type JobListingDTODescription = string | null;

export type JobListingDTOPostedAt = string | null;

export interface JobListingDTO {
  id: number;
  title: string;
  application_url: string;
  source: JobListingDTOSource;
  description: JobListingDTODescription;
  posted_at: JobListingDTOPostedAt;
  scraped_at: string;
  updated_at: string;
}

export interface ResumeDTO {
  id: number;
  name: string;
}

export interface ScrapeJobListingRequest {
  /**
   * @minLength 1
   * @maxLength 2083
   */
  job_url: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export const getFastAPI = () => {
/**
 * @summary Register
 */
const registerAuthRegisterPost = (
    createCandidateRequest: CreateCandidateRequest,
 ) => {
      return customAxios<CandidateDTO>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCandidateRequest
    },
      );
    }
  
/**
 * @summary Login
 */
const loginAuthTokenPost = (
    bodyLoginAuthTokenPost: BodyLoginAuthTokenPost,
 ) => {const formUrlEncoded = new URLSearchParams();
if(bodyLoginAuthTokenPost.grant_type !== undefined && bodyLoginAuthTokenPost.grant_type !== null) {
 formUrlEncoded.append(`grant_type`, bodyLoginAuthTokenPost.grant_type)
 }
formUrlEncoded.append(`username`, bodyLoginAuthTokenPost.username)
formUrlEncoded.append(`password`, bodyLoginAuthTokenPost.password)
if(bodyLoginAuthTokenPost.scope !== undefined) {
 formUrlEncoded.append(`scope`, bodyLoginAuthTokenPost.scope)
 }
if(bodyLoginAuthTokenPost.client_id !== undefined && bodyLoginAuthTokenPost.client_id !== null) {
 formUrlEncoded.append(`client_id`, bodyLoginAuthTokenPost.client_id)
 }
if(bodyLoginAuthTokenPost.client_secret !== undefined && bodyLoginAuthTokenPost.client_secret !== null) {
 formUrlEncoded.append(`client_secret`, bodyLoginAuthTokenPost.client_secret)
 }

      return customAxios<unknown>(
      {url: `/auth/token`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
      );
    }
  
/**
 * @summary Get Me
 */
const getMeMeGet = (
    
 ) => {
      return customAxios<CandidateDTO>(
      {url: `/me/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Add Social Link
 */
const addSocialLinkMeSocialsPut = (
    addOrUpdateSocialRequest: AddOrUpdateSocialRequest,
 ) => {
      return customAxios<CandidateSocialLinkDTO>(
      {url: `/me/socials`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: addOrUpdateSocialRequest
    },
      );
    }
  
/**
 * @summary Remove Social Link
 */
const removeSocialLinkMeSocialsSocialIdDelete = (
    socialId: number,
 ) => {
      return customAxios<unknown>(
      {url: `/me/socials/${socialId}`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary Scrape Job
 */
const scrapeJobJobListingsFromUrlPost = (
    scrapeJobListingRequest: ScrapeJobListingRequest,
 ) => {
      return customAxios<JobListingDTO>(
      {url: `/job-listings/from-url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: scrapeJobListingRequest
    },
      );
    }
  
/**
 * @summary Apply Job
 */
const applyJobJobApplicationsPost = (
    createJobApplicationRequest: CreateJobApplicationRequest,
 ) => {
      return customAxios<JobApplicationDTO>(
      {url: `/job-applications/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createJobApplicationRequest
    },
      );
    }
  
/**
 * @summary Health Check
 */
const healthCheckHealthGet = (
    
 ) => {
      return customAxios<unknown>(
      {url: `/health`, method: 'GET'
    },
      );
    }
  
return {registerAuthRegisterPost,loginAuthTokenPost,getMeMeGet,addSocialLinkMeSocialsPut,removeSocialLinkMeSocialsSocialIdDelete,scrapeJobJobListingsFromUrlPost,applyJobJobApplicationsPost,healthCheckHealthGet}};
export type RegisterAuthRegisterPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getFastAPI>['registerAuthRegisterPost']>>>
export type LoginAuthTokenPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getFastAPI>['loginAuthTokenPost']>>>
export type GetMeMeGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getFastAPI>['getMeMeGet']>>>
export type AddSocialLinkMeSocialsPutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getFastAPI>['addSocialLinkMeSocialsPut']>>>
export type RemoveSocialLinkMeSocialsSocialIdDeleteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getFastAPI>['removeSocialLinkMeSocialsSocialIdDelete']>>>
export type ScrapeJobJobListingsFromUrlPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getFastAPI>['scrapeJobJobListingsFromUrlPost']>>>
export type ApplyJobJobApplicationsPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getFastAPI>['applyJobJobApplicationsPost']>>>
export type HealthCheckHealthGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getFastAPI>['healthCheckHealthGet']>>>
