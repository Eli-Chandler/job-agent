/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ErrorModel,
  HTTPValidationError,
  JobListingDTO,
  ScrapeJobListingRequest
} from '.././models';





/**
 * @summary Scrape Job
 */
export const scrapeJobJobListingsFromUrlPost = (
    scrapeJobListingRequest: ScrapeJobListingRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<JobListingDTO>> => {
    
    
    return axios.default.post(
      `/job-listings/from-url`,
      scrapeJobListingRequest,options
    );
  }



export const getScrapeJobJobListingsFromUrlPostMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>, TError,{data: ScrapeJobListingRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>, TError,{data: ScrapeJobListingRequest}, TContext> => {

const mutationKey = ['scrapeJobJobListingsFromUrlPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>, {data: ScrapeJobListingRequest}> = (props) => {
          const {data} = props ?? {};

          return  scrapeJobJobListingsFromUrlPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ScrapeJobJobListingsFromUrlPostMutationResult = NonNullable<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>>
    export type ScrapeJobJobListingsFromUrlPostMutationBody = ScrapeJobListingRequest
    export type ScrapeJobJobListingsFromUrlPostMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Scrape Job
 */
export const useScrapeJobJobListingsFromUrlPost = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>, TError,{data: ScrapeJobListingRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>,
        TError,
        {data: ScrapeJobListingRequest},
        TContext
      > => {

      const mutationOptions = getScrapeJobJobListingsFromUrlPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    