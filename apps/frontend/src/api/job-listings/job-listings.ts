/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  JobListingDTO,
  ScrapeJobListingRequest
} from '.././models';

import { customAxios } from '.././custom-axios';




/**
 * @summary Scrape Job
 */
export const scrapeJobJobListingsFromUrlPost = (
    scrapeJobListingRequest: ScrapeJobListingRequest,
 signal?: AbortSignal
) => {
      
      
      return customAxios<JobListingDTO>(
      {url: `/job-listings/from-url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: scrapeJobListingRequest, signal
    },
      );
    }
  


export const getScrapeJobJobListingsFromUrlPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>, TError,{data: ScrapeJobListingRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>, TError,{data: ScrapeJobListingRequest}, TContext> => {

const mutationKey = ['scrapeJobJobListingsFromUrlPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>, {data: ScrapeJobListingRequest}> = (props) => {
          const {data} = props ?? {};

          return  scrapeJobJobListingsFromUrlPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ScrapeJobJobListingsFromUrlPostMutationResult = NonNullable<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>>
    export type ScrapeJobJobListingsFromUrlPostMutationBody = ScrapeJobListingRequest
    export type ScrapeJobJobListingsFromUrlPostMutationError = HTTPValidationError

    /**
 * @summary Scrape Job
 */
export const useScrapeJobJobListingsFromUrlPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>, TError,{data: ScrapeJobListingRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof scrapeJobJobListingsFromUrlPost>>,
        TError,
        {data: ScrapeJobListingRequest},
        TContext
      > => {

      const mutationOptions = getScrapeJobJobListingsFromUrlPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    