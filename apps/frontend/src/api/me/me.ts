/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AddOrUpdateSocialRequest,
  CandidateDTO,
  CandidateSocialLinkDTO,
  ErrorModel,
  HTTPValidationError
} from '.././models';





/**
 * @summary Get Me
 */
export const getMeMeGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CandidateDTO>> => {
    
    
    return axios.default.get(
      `/me/`,options
    );
  }


export const getGetMeMeGetQueryKey = () => {
    return [`/me/`] as const;
    }

    
export const getGetMeMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getMeMeGet>>, TError = AxiosError<ErrorModel>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMeGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMeGet>>> = ({ signal }) => getMeMeGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMeGet>>>
export type GetMeMeGetQueryError = AxiosError<ErrorModel>


export function useGetMeMeGet<TData = Awaited<ReturnType<typeof getMeMeGet>>, TError = AxiosError<ErrorModel>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMeGet>>,
          TError,
          Awaited<ReturnType<typeof getMeMeGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeMeGet<TData = Awaited<ReturnType<typeof getMeMeGet>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMeGet>>,
          TError,
          Awaited<ReturnType<typeof getMeMeGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeMeGet<TData = Awaited<ReturnType<typeof getMeMeGet>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMeGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Me
 */

export function useGetMeMeGet<TData = Awaited<ReturnType<typeof getMeMeGet>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMeGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeMeGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Add Social Link
 */
export const addSocialLinkMeSocialsPut = (
    addOrUpdateSocialRequest: AddOrUpdateSocialRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CandidateSocialLinkDTO>> => {
    
    
    return axios.default.put(
      `/me/socials`,
      addOrUpdateSocialRequest,options
    );
  }



export const getAddSocialLinkMeSocialsPutMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addSocialLinkMeSocialsPut>>, TError,{data: AddOrUpdateSocialRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addSocialLinkMeSocialsPut>>, TError,{data: AddOrUpdateSocialRequest}, TContext> => {

const mutationKey = ['addSocialLinkMeSocialsPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addSocialLinkMeSocialsPut>>, {data: AddOrUpdateSocialRequest}> = (props) => {
          const {data} = props ?? {};

          return  addSocialLinkMeSocialsPut(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddSocialLinkMeSocialsPutMutationResult = NonNullable<Awaited<ReturnType<typeof addSocialLinkMeSocialsPut>>>
    export type AddSocialLinkMeSocialsPutMutationBody = AddOrUpdateSocialRequest
    export type AddSocialLinkMeSocialsPutMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Add Social Link
 */
export const useAddSocialLinkMeSocialsPut = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addSocialLinkMeSocialsPut>>, TError,{data: AddOrUpdateSocialRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addSocialLinkMeSocialsPut>>,
        TError,
        {data: AddOrUpdateSocialRequest},
        TContext
      > => {

      const mutationOptions = getAddSocialLinkMeSocialsPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Remove Social Link
 */
export const removeSocialLinkMeSocialsSocialIdDelete = (
    socialId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.delete(
      `/me/socials/${socialId}`,options
    );
  }



export const getRemoveSocialLinkMeSocialsSocialIdDeleteMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeSocialLinkMeSocialsSocialIdDelete>>, TError,{socialId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeSocialLinkMeSocialsSocialIdDelete>>, TError,{socialId: number}, TContext> => {

const mutationKey = ['removeSocialLinkMeSocialsSocialIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeSocialLinkMeSocialsSocialIdDelete>>, {socialId: number}> = (props) => {
          const {socialId} = props ?? {};

          return  removeSocialLinkMeSocialsSocialIdDelete(socialId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveSocialLinkMeSocialsSocialIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof removeSocialLinkMeSocialsSocialIdDelete>>>
    
    export type RemoveSocialLinkMeSocialsSocialIdDeleteMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Remove Social Link
 */
export const useRemoveSocialLinkMeSocialsSocialIdDelete = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeSocialLinkMeSocialsSocialIdDelete>>, TError,{socialId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeSocialLinkMeSocialsSocialIdDelete>>,
        TError,
        {socialId: number},
        TContext
      > => {

      const mutationOptions = getRemoveSocialLinkMeSocialsSocialIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    