/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AddOrUpdateSocialRequest,
  BodyUploadResume,
  CandidateDTO,
  CandidateSocialLinkDTO,
  ErrorModel,
  HTTPValidationError,
  PresignedUrlDTO,
  ResumeDTO,
  UpdateCandidatePersonalInfoRequest
} from '.././models';





/**
 * @summary Get Me
 */
export const getCurrentlyAuthenticatedUser = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CandidateDTO>> => {
    
    
    return axios.default.get(
      `/me/`,options
    );
  }


export const getGetCurrentlyAuthenticatedUserQueryKey = () => {
    return [`/me/`] as const;
    }

    
export const getGetCurrentlyAuthenticatedUserQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError = AxiosError<ErrorModel>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentlyAuthenticatedUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>> = ({ signal }) => getCurrentlyAuthenticatedUser({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentlyAuthenticatedUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>>
export type GetCurrentlyAuthenticatedUserQueryError = AxiosError<ErrorModel>


export function useGetCurrentlyAuthenticatedUser<TData = Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError = AxiosError<ErrorModel>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentlyAuthenticatedUser<TData = Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentlyAuthenticatedUser<TData = Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Me
 */

export function useGetCurrentlyAuthenticatedUser<TData = Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentlyAuthenticatedUser>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCurrentlyAuthenticatedUserQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Me Info
 */
export const updateCurrentlyAuthenticatedUser = (
    updateCandidatePersonalInfoRequest: UpdateCandidatePersonalInfoRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CandidateDTO>> => {
    
    
    return axios.default.patch(
      `/me/`,
      updateCandidatePersonalInfoRequest,options
    );
  }



export const getUpdateCurrentlyAuthenticatedUserMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCurrentlyAuthenticatedUser>>, TError,{data: UpdateCandidatePersonalInfoRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateCurrentlyAuthenticatedUser>>, TError,{data: UpdateCandidatePersonalInfoRequest}, TContext> => {

const mutationKey = ['updateCurrentlyAuthenticatedUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCurrentlyAuthenticatedUser>>, {data: UpdateCandidatePersonalInfoRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateCurrentlyAuthenticatedUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCurrentlyAuthenticatedUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentlyAuthenticatedUser>>>
    export type UpdateCurrentlyAuthenticatedUserMutationBody = UpdateCandidatePersonalInfoRequest
    export type UpdateCurrentlyAuthenticatedUserMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Update Me Info
 */
export const useUpdateCurrentlyAuthenticatedUser = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCurrentlyAuthenticatedUser>>, TError,{data: UpdateCandidatePersonalInfoRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCurrentlyAuthenticatedUser>>,
        TError,
        {data: UpdateCandidatePersonalInfoRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCurrentlyAuthenticatedUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Me Socials
 */
export const getSocialLinks = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CandidateSocialLinkDTO[]>> => {
    
    
    return axios.default.get(
      `/me/socials`,options
    );
  }


export const getGetSocialLinksQueryKey = () => {
    return [`/me/socials`] as const;
    }

    
export const getGetSocialLinksQueryOptions = <TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = AxiosError<ErrorModel>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSocialLinksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSocialLinks>>> = ({ signal }) => getSocialLinks({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSocialLinksQueryResult = NonNullable<Awaited<ReturnType<typeof getSocialLinks>>>
export type GetSocialLinksQueryError = AxiosError<ErrorModel>


export function useGetSocialLinks<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = AxiosError<ErrorModel>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSocialLinks>>,
          TError,
          Awaited<ReturnType<typeof getSocialLinks>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSocialLinks<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSocialLinks>>,
          TError,
          Awaited<ReturnType<typeof getSocialLinks>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSocialLinks<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Me Socials
 */

export function useGetSocialLinks<TData = Awaited<ReturnType<typeof getSocialLinks>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSocialLinks>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSocialLinksQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Add Social Link
 */
export const updateSocialLink = (
    addOrUpdateSocialRequest: AddOrUpdateSocialRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CandidateSocialLinkDTO>> => {
    
    
    return axios.default.put(
      `/me/socials`,
      addOrUpdateSocialRequest,options
    );
  }



export const getUpdateSocialLinkMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSocialLink>>, TError,{data: AddOrUpdateSocialRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateSocialLink>>, TError,{data: AddOrUpdateSocialRequest}, TContext> => {

const mutationKey = ['updateSocialLink'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSocialLink>>, {data: AddOrUpdateSocialRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateSocialLink(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSocialLinkMutationResult = NonNullable<Awaited<ReturnType<typeof updateSocialLink>>>
    export type UpdateSocialLinkMutationBody = AddOrUpdateSocialRequest
    export type UpdateSocialLinkMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Add Social Link
 */
export const useUpdateSocialLink = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSocialLink>>, TError,{data: AddOrUpdateSocialRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateSocialLink>>,
        TError,
        {data: AddOrUpdateSocialRequest},
        TContext
      > => {

      const mutationOptions = getUpdateSocialLinkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Remove Social Link
 */
export const deleteSocialLink = (
    socialId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.delete(
      `/me/socials/${socialId}`,options
    );
  }



export const getDeleteSocialLinkMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSocialLink>>, TError,{socialId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSocialLink>>, TError,{socialId: number}, TContext> => {

const mutationKey = ['deleteSocialLink'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSocialLink>>, {socialId: number}> = (props) => {
          const {socialId} = props ?? {};

          return  deleteSocialLink(socialId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSocialLinkMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSocialLink>>>
    
    export type DeleteSocialLinkMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Remove Social Link
 */
export const useDeleteSocialLink = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSocialLink>>, TError,{socialId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteSocialLink>>,
        TError,
        {socialId: number},
        TContext
      > => {

      const mutationOptions = getDeleteSocialLinkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Resumes
 */
export const getResumes = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResumeDTO[]>> => {
    
    
    return axios.default.get(
      `/me/resumes`,options
    );
  }


export const getGetResumesQueryKey = () => {
    return [`/me/resumes`] as const;
    }

    
export const getGetResumesQueryOptions = <TData = Awaited<ReturnType<typeof getResumes>>, TError = AxiosError<ErrorModel>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumes>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetResumesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getResumes>>> = ({ signal }) => getResumes({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getResumes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetResumesQueryResult = NonNullable<Awaited<ReturnType<typeof getResumes>>>
export type GetResumesQueryError = AxiosError<ErrorModel>


export function useGetResumes<TData = Awaited<ReturnType<typeof getResumes>>, TError = AxiosError<ErrorModel>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResumes>>,
          TError,
          Awaited<ReturnType<typeof getResumes>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResumes<TData = Awaited<ReturnType<typeof getResumes>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResumes>>,
          TError,
          Awaited<ReturnType<typeof getResumes>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResumes<TData = Awaited<ReturnType<typeof getResumes>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Resumes
 */

export function useGetResumes<TData = Awaited<ReturnType<typeof getResumes>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetResumesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Upload Resume
 */
export const uploadResume = (
    bodyUploadResume: BodyUploadResume, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResumeDTO>> => {
    
    const formData = new FormData();
formData.append(`name`, bodyUploadResume.name)
formData.append(`file`, bodyUploadResume.file)

    return axios.default.post(
      `/me/resumes`,
      formData,options
    );
  }



export const getUploadResumeMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadResume>>, TError,{data: BodyUploadResume}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof uploadResume>>, TError,{data: BodyUploadResume}, TContext> => {

const mutationKey = ['uploadResume'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadResume>>, {data: BodyUploadResume}> = (props) => {
          const {data} = props ?? {};

          return  uploadResume(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadResumeMutationResult = NonNullable<Awaited<ReturnType<typeof uploadResume>>>
    export type UploadResumeMutationBody = BodyUploadResume
    export type UploadResumeMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Upload Resume
 */
export const useUploadResume = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadResume>>, TError,{data: BodyUploadResume}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadResume>>,
        TError,
        {data: BodyUploadResume},
        TContext
      > => {

      const mutationOptions = getUploadResumeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Resume
 */
export const deleteResume = (
    resumeId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.delete(
      `/me/resumes/${resumeId}`,options
    );
  }



export const getDeleteResumeMutationOptions = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteResume>>, TError,{resumeId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteResume>>, TError,{resumeId: number}, TContext> => {

const mutationKey = ['deleteResume'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteResume>>, {resumeId: number}> = (props) => {
          const {resumeId} = props ?? {};

          return  deleteResume(resumeId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteResumeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteResume>>>
    
    export type DeleteResumeMutationError = AxiosError<ErrorModel | HTTPValidationError>

    /**
 * @summary Delete Resume
 */
export const useDeleteResume = <TError = AxiosError<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteResume>>, TError,{resumeId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteResume>>,
        TError,
        {resumeId: number},
        TContext
      > => {

      const mutationOptions = getDeleteResumeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Resume Presigned Url
 */
export const getResumePresignedUrl = (
    resumeId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PresignedUrlDTO>> => {
    
    
    return axios.default.get(
      `/me/resumes/${resumeId}/presigned-url`,options
    );
  }


export const getGetResumePresignedUrlQueryKey = (resumeId: number,) => {
    return [`/me/resumes/${resumeId}/presigned-url`] as const;
    }

    
export const getGetResumePresignedUrlQueryOptions = <TData = Awaited<ReturnType<typeof getResumePresignedUrl>>, TError = AxiosError<ErrorModel | HTTPValidationError>>(resumeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumePresignedUrl>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetResumePresignedUrlQueryKey(resumeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getResumePresignedUrl>>> = ({ signal }) => getResumePresignedUrl(resumeId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(resumeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getResumePresignedUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetResumePresignedUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getResumePresignedUrl>>>
export type GetResumePresignedUrlQueryError = AxiosError<ErrorModel | HTTPValidationError>


export function useGetResumePresignedUrl<TData = Awaited<ReturnType<typeof getResumePresignedUrl>>, TError = AxiosError<ErrorModel | HTTPValidationError>>(
 resumeId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumePresignedUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResumePresignedUrl>>,
          TError,
          Awaited<ReturnType<typeof getResumePresignedUrl>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResumePresignedUrl<TData = Awaited<ReturnType<typeof getResumePresignedUrl>>, TError = AxiosError<ErrorModel | HTTPValidationError>>(
 resumeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumePresignedUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResumePresignedUrl>>,
          TError,
          Awaited<ReturnType<typeof getResumePresignedUrl>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResumePresignedUrl<TData = Awaited<ReturnType<typeof getResumePresignedUrl>>, TError = AxiosError<ErrorModel | HTTPValidationError>>(
 resumeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumePresignedUrl>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Resume Presigned Url
 */

export function useGetResumePresignedUrl<TData = Awaited<ReturnType<typeof getResumePresignedUrl>>, TError = AxiosError<ErrorModel | HTTPValidationError>>(
 resumeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResumePresignedUrl>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetResumePresignedUrlQueryOptions(resumeId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



