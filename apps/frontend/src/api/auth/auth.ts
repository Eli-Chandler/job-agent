/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  BodyLoginAuthTokenPost,
  CandidateDTO,
  CreateCandidateRequest,
  HTTPValidationError
} from '.././models';

import { customAxios } from '.././custom-axios';




/**
 * @summary Register
 */
export const registerAuthRegisterPost = (
    createCandidateRequest: CreateCandidateRequest,
 signal?: AbortSignal
) => {
      
      
      return customAxios<CandidateDTO>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCandidateRequest, signal
    },
      );
    }
  


export const getRegisterAuthRegisterPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerAuthRegisterPost>>, TError,{data: CreateCandidateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerAuthRegisterPost>>, TError,{data: CreateCandidateRequest}, TContext> => {

const mutationKey = ['registerAuthRegisterPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerAuthRegisterPost>>, {data: CreateCandidateRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerAuthRegisterPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterAuthRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerAuthRegisterPost>>>
    export type RegisterAuthRegisterPostMutationBody = CreateCandidateRequest
    export type RegisterAuthRegisterPostMutationError = HTTPValidationError

    /**
 * @summary Register
 */
export const useRegisterAuthRegisterPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerAuthRegisterPost>>, TError,{data: CreateCandidateRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerAuthRegisterPost>>,
        TError,
        {data: CreateCandidateRequest},
        TContext
      > => {

      const mutationOptions = getRegisterAuthRegisterPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Login
 */
export const loginAuthTokenPost = (
    bodyLoginAuthTokenPost: BodyLoginAuthTokenPost,
 signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
if(bodyLoginAuthTokenPost.grant_type !== undefined && bodyLoginAuthTokenPost.grant_type !== null) {
 formUrlEncoded.append(`grant_type`, bodyLoginAuthTokenPost.grant_type)
 }
formUrlEncoded.append(`username`, bodyLoginAuthTokenPost.username)
formUrlEncoded.append(`password`, bodyLoginAuthTokenPost.password)
if(bodyLoginAuthTokenPost.scope !== undefined) {
 formUrlEncoded.append(`scope`, bodyLoginAuthTokenPost.scope)
 }
if(bodyLoginAuthTokenPost.client_id !== undefined && bodyLoginAuthTokenPost.client_id !== null) {
 formUrlEncoded.append(`client_id`, bodyLoginAuthTokenPost.client_id)
 }
if(bodyLoginAuthTokenPost.client_secret !== undefined && bodyLoginAuthTokenPost.client_secret !== null) {
 formUrlEncoded.append(`client_secret`, bodyLoginAuthTokenPost.client_secret)
 }

      return customAxios<unknown>(
      {url: `/auth/token`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      );
    }
  


export const getLoginAuthTokenPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAuthTokenPost>>, TError,{data: BodyLoginAuthTokenPost}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof loginAuthTokenPost>>, TError,{data: BodyLoginAuthTokenPost}, TContext> => {

const mutationKey = ['loginAuthTokenPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginAuthTokenPost>>, {data: BodyLoginAuthTokenPost}> = (props) => {
          const {data} = props ?? {};

          return  loginAuthTokenPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginAuthTokenPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginAuthTokenPost>>>
    export type LoginAuthTokenPostMutationBody = BodyLoginAuthTokenPost
    export type LoginAuthTokenPostMutationError = HTTPValidationError

    /**
 * @summary Login
 */
export const useLoginAuthTokenPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAuthTokenPost>>, TError,{data: BodyLoginAuthTokenPost}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof loginAuthTokenPost>>,
        TError,
        {data: BodyLoginAuthTokenPost},
        TContext
      > => {

      const mutationOptions = getLoginAuthTokenPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    